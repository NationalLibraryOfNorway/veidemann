// source: scopechecker/v1/scopechecker.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var frontier_v1_resources_pb = require('../../frontier/v1/resources_pb.js');
goog.object.extend(proto, frontier_v1_resources_pb);
var commons_v1_resources_pb = require('../../commons/v1/resources_pb.js');
goog.object.extend(proto, commons_v1_resources_pb);
goog.exportSymbol('proto.veidemann.api.scopechecker.v1.ScopeCheckRequest', null, global);
goog.exportSymbol('proto.veidemann.api.scopechecker.v1.ScopeCheckResponse', null, global);
goog.exportSymbol('proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.Evaluation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.veidemann.api.scopechecker.v1.ScopeCheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.displayName = 'proto.veidemann.api.scopechecker.v1.ScopeCheckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.veidemann.api.scopechecker.v1.ScopeCheckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.displayName = 'proto.veidemann.api.scopechecker.v1.ScopeCheckResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.veidemann.api.scopechecker.v1.ScopeCheckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
queuedUri: (f = msg.getQueuedUri()) && frontier_v1_resources_pb.QueuedUri.toObject(includeInstance, f),
scopeScriptName: jspb.Message.getFieldWithDefault(msg, 2, ""),
scopeScript: jspb.Message.getFieldWithDefault(msg, 3, ""),
debug: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckRequest}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.veidemann.api.scopechecker.v1.ScopeCheckRequest;
  return proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.veidemann.api.scopechecker.v1.ScopeCheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckRequest}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new frontier_v1_resources_pb.QueuedUri;
      reader.readMessage(value,frontier_v1_resources_pb.QueuedUri.deserializeBinaryFromReader);
      msg.setQueuedUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeScriptName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScopeScript(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.veidemann.api.scopechecker.v1.ScopeCheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueuedUri();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      frontier_v1_resources_pb.QueuedUri.serializeBinaryToWriter
    );
  }
  f = message.getScopeScriptName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScopeScript();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDebug();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional veidemann.api.frontier.v1.QueuedUri queued_uri = 1;
 * @return {?proto.veidemann.api.frontier.v1.QueuedUri}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.getQueuedUri = function() {
  return /** @type{?proto.veidemann.api.frontier.v1.QueuedUri} */ (
    jspb.Message.getWrapperField(this, frontier_v1_resources_pb.QueuedUri, 1));
};


/**
 * @param {?proto.veidemann.api.frontier.v1.QueuedUri|undefined} value
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckRequest} returns this
*/
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.setQueuedUri = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckRequest} returns this
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.clearQueuedUri = function() {
  return this.setQueuedUri(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.hasQueuedUri = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string scope_script_name = 2;
 * @return {string}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.getScopeScriptName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckRequest} returns this
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.setScopeScriptName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string scope_script = 3;
 * @return {string}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.getScopeScript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckRequest} returns this
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.setScopeScript = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool debug = 4;
 * @return {boolean}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckRequest} returns this
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckRequest.prototype.setDebug = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
evaluation: jspb.Message.getFieldWithDefault(msg, 1, 0),
excludeReason: jspb.Message.getFieldWithDefault(msg, 2, 0),
includeCheckUri: (f = msg.getIncludeCheckUri()) && commons_v1_resources_pb.ParsedUri.toObject(includeInstance, f),
error: (f = msg.getError()) && commons_v1_resources_pb.Error.toObject(includeInstance, f),
console: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.veidemann.api.scopechecker.v1.ScopeCheckResponse;
  return proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.Evaluation} */ (reader.readEnum());
      msg.setEvaluation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExcludeReason(value);
      break;
    case 3:
      var value = new commons_v1_resources_pb.ParsedUri;
      reader.readMessage(value,commons_v1_resources_pb.ParsedUri.deserializeBinaryFromReader);
      msg.setIncludeCheckUri(value);
      break;
    case 4:
      var value = new commons_v1_resources_pb.Error;
      reader.readMessage(value,commons_v1_resources_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvaluation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getExcludeReason();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIncludeCheckUri();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      commons_v1_resources_pb.ParsedUri.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      commons_v1_resources_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getConsole();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.Evaluation = {
  INCLUDE: 0,
  EXCLUDE: 1
};

/**
 * optional Evaluation evaluation = 1;
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.Evaluation}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.getEvaluation = function() {
  return /** @type {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.Evaluation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.Evaluation} value
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse} returns this
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.setEvaluation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 exclude_reason = 2;
 * @return {number}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.getExcludeReason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse} returns this
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.setExcludeReason = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional veidemann.api.commons.v1.ParsedUri include_check_uri = 3;
 * @return {?proto.veidemann.api.commons.v1.ParsedUri}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.getIncludeCheckUri = function() {
  return /** @type{?proto.veidemann.api.commons.v1.ParsedUri} */ (
    jspb.Message.getWrapperField(this, commons_v1_resources_pb.ParsedUri, 3));
};


/**
 * @param {?proto.veidemann.api.commons.v1.ParsedUri|undefined} value
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse} returns this
*/
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.setIncludeCheckUri = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse} returns this
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.clearIncludeCheckUri = function() {
  return this.setIncludeCheckUri(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.hasIncludeCheckUri = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional veidemann.api.commons.v1.Error error = 4;
 * @return {?proto.veidemann.api.commons.v1.Error}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.getError = function() {
  return /** @type{?proto.veidemann.api.commons.v1.Error} */ (
    jspb.Message.getWrapperField(this, commons_v1_resources_pb.Error, 4));
};


/**
 * @param {?proto.veidemann.api.commons.v1.Error|undefined} value
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse} returns this
*/
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse} returns this
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string console = 5;
 * @return {string}
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.getConsole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.veidemann.api.scopechecker.v1.ScopeCheckResponse} returns this
 */
proto.veidemann.api.scopechecker.v1.ScopeCheckResponse.prototype.setConsole = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


goog.object.extend(exports, proto.veidemann.api.scopechecker.v1);
