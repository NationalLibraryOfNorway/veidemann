// source: dnsresolver/v1/dnsresolver.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var config_v1_resources_pb = require('../../config/v1/resources_pb.js');
goog.object.extend(proto, config_v1_resources_pb);
var commons_v1_resources_pb = require('../../commons/v1/resources_pb.js');
goog.object.extend(proto, commons_v1_resources_pb);
goog.exportSymbol('proto.veidemann.api.dnsresolver.v1.ResolveReply', null, global);
goog.exportSymbol('proto.veidemann.api.dnsresolver.v1.ResolveRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.veidemann.api.dnsresolver.v1.ResolveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.veidemann.api.dnsresolver.v1.ResolveRequest.displayName = 'proto.veidemann.api.dnsresolver.v1.ResolveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.veidemann.api.dnsresolver.v1.ResolveReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.veidemann.api.dnsresolver.v1.ResolveReply.displayName = 'proto.veidemann.api.dnsresolver.v1.ResolveReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.veidemann.api.dnsresolver.v1.ResolveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.veidemann.api.dnsresolver.v1.ResolveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
host: jspb.Message.getFieldWithDefault(msg, 1, ""),
port: jspb.Message.getFieldWithDefault(msg, 2, 0),
executionId: jspb.Message.getFieldWithDefault(msg, 6, ""),
collectionRef: (f = msg.getCollectionRef()) && config_v1_resources_pb.ConfigRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveRequest}
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.veidemann.api.dnsresolver.v1.ResolveRequest;
  return proto.veidemann.api.dnsresolver.v1.ResolveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.veidemann.api.dnsresolver.v1.ResolveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveRequest}
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionId(value);
      break;
    case 7:
      var value = new config_v1_resources_pb.ConfigRef;
      reader.readMessage(value,config_v1_resources_pb.ConfigRef.deserializeBinaryFromReader);
      msg.setCollectionRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.veidemann.api.dnsresolver.v1.ResolveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.veidemann.api.dnsresolver.v1.ResolveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getExecutionId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCollectionRef();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      config_v1_resources_pb.ConfigRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveRequest} returns this
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveRequest} returns this
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string execution_id = 6;
 * @return {string}
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.getExecutionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveRequest} returns this
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.setExecutionId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional veidemann.api.config.v1.ConfigRef collection_ref = 7;
 * @return {?proto.veidemann.api.config.v1.ConfigRef}
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.getCollectionRef = function() {
  return /** @type{?proto.veidemann.api.config.v1.ConfigRef} */ (
    jspb.Message.getWrapperField(this, config_v1_resources_pb.ConfigRef, 7));
};


/**
 * @param {?proto.veidemann.api.config.v1.ConfigRef|undefined} value
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveRequest} returns this
*/
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.setCollectionRef = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveRequest} returns this
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.clearCollectionRef = function() {
  return this.setCollectionRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.veidemann.api.dnsresolver.v1.ResolveRequest.prototype.hasCollectionRef = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.toObject = function(opt_includeInstance) {
  return proto.veidemann.api.dnsresolver.v1.ResolveReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.veidemann.api.dnsresolver.v1.ResolveReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.toObject = function(includeInstance, msg) {
  var f, obj = {
host: jspb.Message.getFieldWithDefault(msg, 1, ""),
port: jspb.Message.getFieldWithDefault(msg, 2, 0),
textualIp: jspb.Message.getFieldWithDefault(msg, 3, ""),
rawIp: msg.getRawIp_asB64(),
error: (f = msg.getError()) && commons_v1_resources_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveReply}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.veidemann.api.dnsresolver.v1.ResolveReply;
  return proto.veidemann.api.dnsresolver.v1.ResolveReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.veidemann.api.dnsresolver.v1.ResolveReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveReply}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextualIp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawIp(value);
      break;
    case 5:
      var value = new commons_v1_resources_pb.Error;
      reader.readMessage(value,commons_v1_resources_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.veidemann.api.dnsresolver.v1.ResolveReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.veidemann.api.dnsresolver.v1.ResolveReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTextualIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRawIp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      commons_v1_resources_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveReply} returns this
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveReply} returns this
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string textual_ip = 3;
 * @return {string}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.getTextualIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveReply} returns this
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.setTextualIp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes raw_ip = 4;
 * @return {string}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.getRawIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes raw_ip = 4;
 * This is a type-conversion wrapper around `getRawIp()`
 * @return {string}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.getRawIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawIp()));
};


/**
 * optional bytes raw_ip = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawIp()`
 * @return {!Uint8Array}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.getRawIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawIp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveReply} returns this
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.setRawIp = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional veidemann.api.commons.v1.Error error = 5;
 * @return {?proto.veidemann.api.commons.v1.Error}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.getError = function() {
  return /** @type{?proto.veidemann.api.commons.v1.Error} */ (
    jspb.Message.getWrapperField(this, commons_v1_resources_pb.Error, 5));
};


/**
 * @param {?proto.veidemann.api.commons.v1.Error|undefined} value
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveReply} returns this
*/
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.veidemann.api.dnsresolver.v1.ResolveReply} returns this
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.veidemann.api.dnsresolver.v1.ResolveReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.veidemann.api.dnsresolver.v1);
