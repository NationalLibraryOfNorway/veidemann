// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: frontier/v1/frontier.proto

package frontier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Frontier_CrawlSeed_FullMethodName                   = "/veidemann.api.frontier.v1.Frontier/CrawlSeed"
	Frontier_GetNextPage_FullMethodName                 = "/veidemann.api.frontier.v1.Frontier/GetNextPage"
	Frontier_PageCompleted_FullMethodName               = "/veidemann.api.frontier.v1.Frontier/PageCompleted"
	Frontier_BusyCrawlHostGroupCount_FullMethodName     = "/veidemann.api.frontier.v1.Frontier/BusyCrawlHostGroupCount"
	Frontier_QueueCountTotal_FullMethodName             = "/veidemann.api.frontier.v1.Frontier/QueueCountTotal"
	Frontier_QueueCountForCrawlExecution_FullMethodName = "/veidemann.api.frontier.v1.Frontier/QueueCountForCrawlExecution"
	Frontier_QueueCountForCrawlHostGroup_FullMethodName = "/veidemann.api.frontier.v1.Frontier/QueueCountForCrawlHostGroup"
)

// FrontierClient is the client API for Frontier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for controlling frontier.
type FrontierClient interface {
	// Start crawling seed
	CrawlSeed(ctx context.Context, in *CrawlSeedRequest, opts ...grpc.CallOption) (*CrawlExecutionId, error)
	// Request a URI from the Frontiers queue.
	// Used by a Harvester to fetch a new page. If no URI is ready for harvesting, Frontier should return
	// gRPC status NOT_FOUND. Harvester should then retry the request after a reasonable backoff time.
	GetNextPage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PageHarvestSpec, error)
	// Inform Frontier that a page fetch was finished.
	// Contains metrics, outlinks and error as a stream of messages. Client closes stream when finished.
	PageCompleted(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PageHarvest, emptypb.Empty], error)
	// The number of busy CrawlHostGroups which essentially is the number of web pages currently downloading
	BusyCrawlHostGroupCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountResponse, error)
	// Total number of queued URI's
	QueueCountTotal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountResponse, error)
	// Number of queued URI's for a CrawlExecution
	QueueCountForCrawlExecution(ctx context.Context, in *CrawlExecutionId, opts ...grpc.CallOption) (*CountResponse, error)
	// Number of queued URI's for a CrawlHostGroup
	QueueCountForCrawlHostGroup(ctx context.Context, in *CrawlHostGroup, opts ...grpc.CallOption) (*CountResponse, error)
}

type frontierClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontierClient(cc grpc.ClientConnInterface) FrontierClient {
	return &frontierClient{cc}
}

func (c *frontierClient) CrawlSeed(ctx context.Context, in *CrawlSeedRequest, opts ...grpc.CallOption) (*CrawlExecutionId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CrawlExecutionId)
	err := c.cc.Invoke(ctx, Frontier_CrawlSeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierClient) GetNextPage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PageHarvestSpec, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageHarvestSpec)
	err := c.cc.Invoke(ctx, Frontier_GetNextPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierClient) PageCompleted(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PageHarvest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Frontier_ServiceDesc.Streams[0], Frontier_PageCompleted_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PageHarvest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Frontier_PageCompletedClient = grpc.ClientStreamingClient[PageHarvest, emptypb.Empty]

func (c *frontierClient) BusyCrawlHostGroupCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, Frontier_BusyCrawlHostGroupCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierClient) QueueCountTotal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, Frontier_QueueCountTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierClient) QueueCountForCrawlExecution(ctx context.Context, in *CrawlExecutionId, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, Frontier_QueueCountForCrawlExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierClient) QueueCountForCrawlHostGroup(ctx context.Context, in *CrawlHostGroup, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, Frontier_QueueCountForCrawlHostGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontierServer is the server API for Frontier service.
// All implementations must embed UnimplementedFrontierServer
// for forward compatibility.
//
// Service for controlling frontier.
type FrontierServer interface {
	// Start crawling seed
	CrawlSeed(context.Context, *CrawlSeedRequest) (*CrawlExecutionId, error)
	// Request a URI from the Frontiers queue.
	// Used by a Harvester to fetch a new page. If no URI is ready for harvesting, Frontier should return
	// gRPC status NOT_FOUND. Harvester should then retry the request after a reasonable backoff time.
	GetNextPage(context.Context, *emptypb.Empty) (*PageHarvestSpec, error)
	// Inform Frontier that a page fetch was finished.
	// Contains metrics, outlinks and error as a stream of messages. Client closes stream when finished.
	PageCompleted(grpc.ClientStreamingServer[PageHarvest, emptypb.Empty]) error
	// The number of busy CrawlHostGroups which essentially is the number of web pages currently downloading
	BusyCrawlHostGroupCount(context.Context, *emptypb.Empty) (*CountResponse, error)
	// Total number of queued URI's
	QueueCountTotal(context.Context, *emptypb.Empty) (*CountResponse, error)
	// Number of queued URI's for a CrawlExecution
	QueueCountForCrawlExecution(context.Context, *CrawlExecutionId) (*CountResponse, error)
	// Number of queued URI's for a CrawlHostGroup
	QueueCountForCrawlHostGroup(context.Context, *CrawlHostGroup) (*CountResponse, error)
	mustEmbedUnimplementedFrontierServer()
}

// UnimplementedFrontierServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFrontierServer struct{}

func (UnimplementedFrontierServer) CrawlSeed(context.Context, *CrawlSeedRequest) (*CrawlExecutionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrawlSeed not implemented")
}
func (UnimplementedFrontierServer) GetNextPage(context.Context, *emptypb.Empty) (*PageHarvestSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextPage not implemented")
}
func (UnimplementedFrontierServer) PageCompleted(grpc.ClientStreamingServer[PageHarvest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method PageCompleted not implemented")
}
func (UnimplementedFrontierServer) BusyCrawlHostGroupCount(context.Context, *emptypb.Empty) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusyCrawlHostGroupCount not implemented")
}
func (UnimplementedFrontierServer) QueueCountTotal(context.Context, *emptypb.Empty) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCountTotal not implemented")
}
func (UnimplementedFrontierServer) QueueCountForCrawlExecution(context.Context, *CrawlExecutionId) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCountForCrawlExecution not implemented")
}
func (UnimplementedFrontierServer) QueueCountForCrawlHostGroup(context.Context, *CrawlHostGroup) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCountForCrawlHostGroup not implemented")
}
func (UnimplementedFrontierServer) mustEmbedUnimplementedFrontierServer() {}
func (UnimplementedFrontierServer) testEmbeddedByValue()                  {}

// UnsafeFrontierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontierServer will
// result in compilation errors.
type UnsafeFrontierServer interface {
	mustEmbedUnimplementedFrontierServer()
}

func RegisterFrontierServer(s grpc.ServiceRegistrar, srv FrontierServer) {
	// If the following call pancis, it indicates UnimplementedFrontierServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Frontier_ServiceDesc, srv)
}

func _Frontier_CrawlSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServer).CrawlSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontier_CrawlSeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServer).CrawlSeed(ctx, req.(*CrawlSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontier_GetNextPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServer).GetNextPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontier_GetNextPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServer).GetNextPage(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontier_PageCompleted_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontierServer).PageCompleted(&grpc.GenericServerStream[PageHarvest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Frontier_PageCompletedServer = grpc.ClientStreamingServer[PageHarvest, emptypb.Empty]

func _Frontier_BusyCrawlHostGroupCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServer).BusyCrawlHostGroupCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontier_BusyCrawlHostGroupCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServer).BusyCrawlHostGroupCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontier_QueueCountTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServer).QueueCountTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontier_QueueCountTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServer).QueueCountTotal(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontier_QueueCountForCrawlExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlExecutionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServer).QueueCountForCrawlExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontier_QueueCountForCrawlExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServer).QueueCountForCrawlExecution(ctx, req.(*CrawlExecutionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontier_QueueCountForCrawlHostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlHostGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServer).QueueCountForCrawlHostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontier_QueueCountForCrawlHostGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServer).QueueCountForCrawlHostGroup(ctx, req.(*CrawlHostGroup))
	}
	return interceptor(ctx, in, info, handler)
}

// Frontier_ServiceDesc is the grpc.ServiceDesc for Frontier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Frontier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.frontier.v1.Frontier",
	HandlerType: (*FrontierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrawlSeed",
			Handler:    _Frontier_CrawlSeed_Handler,
		},
		{
			MethodName: "GetNextPage",
			Handler:    _Frontier_GetNextPage_Handler,
		},
		{
			MethodName: "BusyCrawlHostGroupCount",
			Handler:    _Frontier_BusyCrawlHostGroupCount_Handler,
		},
		{
			MethodName: "QueueCountTotal",
			Handler:    _Frontier_QueueCountTotal_Handler,
		},
		{
			MethodName: "QueueCountForCrawlExecution",
			Handler:    _Frontier_QueueCountForCrawlExecution_Handler,
		},
		{
			MethodName: "QueueCountForCrawlHostGroup",
			Handler:    _Frontier_QueueCountForCrawlHostGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PageCompleted",
			Handler:       _Frontier_PageCompleted_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "frontier/v1/frontier.proto",
}
