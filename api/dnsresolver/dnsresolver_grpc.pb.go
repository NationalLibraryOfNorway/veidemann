// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: dnsresolver/v1/dnsresolver.proto

package dnsresolver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DnsResolver_Resolve_FullMethodName = "/veidemann.api.dnsresolver.v1.DnsResolver/resolve"
)

// DnsResolverClient is the client API for DnsResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for resolving, caching and logging dns requests.
type DnsResolverClient interface {
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveReply, error)
}

type dnsResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewDnsResolverClient(cc grpc.ClientConnInterface) DnsResolverClient {
	return &dnsResolverClient{cc}
}

func (c *dnsResolverClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveReply)
	err := c.cc.Invoke(ctx, DnsResolver_Resolve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsResolverServer is the server API for DnsResolver service.
// All implementations must embed UnimplementedDnsResolverServer
// for forward compatibility.
//
// Service for resolving, caching and logging dns requests.
type DnsResolverServer interface {
	Resolve(context.Context, *ResolveRequest) (*ResolveReply, error)
	mustEmbedUnimplementedDnsResolverServer()
}

// UnimplementedDnsResolverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDnsResolverServer struct{}

func (UnimplementedDnsResolverServer) Resolve(context.Context, *ResolveRequest) (*ResolveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedDnsResolverServer) mustEmbedUnimplementedDnsResolverServer() {}
func (UnimplementedDnsResolverServer) testEmbeddedByValue()                     {}

// UnsafeDnsResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnsResolverServer will
// result in compilation errors.
type UnsafeDnsResolverServer interface {
	mustEmbedUnimplementedDnsResolverServer()
}

func RegisterDnsResolverServer(s grpc.ServiceRegistrar, srv DnsResolverServer) {
	// If the following call pancis, it indicates UnimplementedDnsResolverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DnsResolver_ServiceDesc, srv)
}

func _DnsResolver_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsResolverServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsResolver_Resolve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsResolverServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DnsResolver_ServiceDesc is the grpc.ServiceDesc for DnsResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DnsResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.dnsresolver.v1.DnsResolver",
	HandlerType: (*DnsResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "resolve",
			Handler:    _DnsResolver_Resolve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dnsresolver/v1/dnsresolver.proto",
}
