// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: uricanonicalizer/v1/uricanonicalizer.proto

package uricanonicalizer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UriCanonicalizerService_Canonicalize_FullMethodName = "/veidemann.api.uricanonicalizer.v1.UriCanonicalizerService/Canonicalize"
)

// UriCanonicalizerServiceClient is the client API for UriCanonicalizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for URI canonicalization.
type UriCanonicalizerServiceClient interface {
	// Canonicalize URI for crawling.
	// Examples of canonicalization could be:
	// * Remove port numbers for well known schemes (i.e. http://example.com:80 => http://example.com)
	// * Normalize slash for empty path (i.e. http://example.com => http://example.com/)
	// * Normalize path (i.e. http://example.com/a//b/./c => http://example.com/a/b/c)
	Canonicalize(ctx context.Context, in *CanonicalizeRequest, opts ...grpc.CallOption) (*CanonicalizeResponse, error)
}

type uriCanonicalizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUriCanonicalizerServiceClient(cc grpc.ClientConnInterface) UriCanonicalizerServiceClient {
	return &uriCanonicalizerServiceClient{cc}
}

func (c *uriCanonicalizerServiceClient) Canonicalize(ctx context.Context, in *CanonicalizeRequest, opts ...grpc.CallOption) (*CanonicalizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanonicalizeResponse)
	err := c.cc.Invoke(ctx, UriCanonicalizerService_Canonicalize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UriCanonicalizerServiceServer is the server API for UriCanonicalizerService service.
// All implementations must embed UnimplementedUriCanonicalizerServiceServer
// for forward compatibility.
//
// Service for URI canonicalization.
type UriCanonicalizerServiceServer interface {
	// Canonicalize URI for crawling.
	// Examples of canonicalization could be:
	// * Remove port numbers for well known schemes (i.e. http://example.com:80 => http://example.com)
	// * Normalize slash for empty path (i.e. http://example.com => http://example.com/)
	// * Normalize path (i.e. http://example.com/a//b/./c => http://example.com/a/b/c)
	Canonicalize(context.Context, *CanonicalizeRequest) (*CanonicalizeResponse, error)
	mustEmbedUnimplementedUriCanonicalizerServiceServer()
}

// UnimplementedUriCanonicalizerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUriCanonicalizerServiceServer struct{}

func (UnimplementedUriCanonicalizerServiceServer) Canonicalize(context.Context, *CanonicalizeRequest) (*CanonicalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Canonicalize not implemented")
}
func (UnimplementedUriCanonicalizerServiceServer) mustEmbedUnimplementedUriCanonicalizerServiceServer() {
}
func (UnimplementedUriCanonicalizerServiceServer) testEmbeddedByValue() {}

// UnsafeUriCanonicalizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UriCanonicalizerServiceServer will
// result in compilation errors.
type UnsafeUriCanonicalizerServiceServer interface {
	mustEmbedUnimplementedUriCanonicalizerServiceServer()
}

func RegisterUriCanonicalizerServiceServer(s grpc.ServiceRegistrar, srv UriCanonicalizerServiceServer) {
	// If the following call pancis, it indicates UnimplementedUriCanonicalizerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UriCanonicalizerService_ServiceDesc, srv)
}

func _UriCanonicalizerService_Canonicalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanonicalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UriCanonicalizerServiceServer).Canonicalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UriCanonicalizerService_Canonicalize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UriCanonicalizerServiceServer).Canonicalize(ctx, req.(*CanonicalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UriCanonicalizerService_ServiceDesc is the grpc.ServiceDesc for UriCanonicalizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UriCanonicalizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.uricanonicalizer.v1.UriCanonicalizerService",
	HandlerType: (*UriCanonicalizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Canonicalize",
			Handler:    _UriCanonicalizerService_Canonicalize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uricanonicalizer/v1/uricanonicalizer.proto",
}
