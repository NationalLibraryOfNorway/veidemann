// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: report/v1/report.proto

package report

import (
	context "context"
	frontier "github.com/NationalLibraryOfNorway/veidemann/api/frontier"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Report_ExecuteDbQuery_FullMethodName    = "/veidemann.api.report.v1.Report/ExecuteDbQuery"
	Report_ListExecutions_FullMethodName    = "/veidemann.api.report.v1.Report/ListExecutions"
	Report_ListJobExecutions_FullMethodName = "/veidemann.api.report.v1.Report/ListJobExecutions"
)

// ReportClient is the client API for Report service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for crawler reports.
type ReportClient interface {
	// Execute a query against the database
	ExecuteDbQuery(ctx context.Context, in *ExecuteDbQueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecuteDbQueryReply], error)
	// List a set of crawl executions
	ListExecutions(ctx context.Context, in *CrawlExecutionsListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[frontier.CrawlExecutionStatus], error)
	// List a set of job executions
	ListJobExecutions(ctx context.Context, in *JobExecutionsListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[frontier.JobExecutionStatus], error)
}

type reportClient struct {
	cc grpc.ClientConnInterface
}

func NewReportClient(cc grpc.ClientConnInterface) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) ExecuteDbQuery(ctx context.Context, in *ExecuteDbQueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecuteDbQueryReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Report_ServiceDesc.Streams[0], Report_ExecuteDbQuery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecuteDbQueryRequest, ExecuteDbQueryReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Report_ExecuteDbQueryClient = grpc.ServerStreamingClient[ExecuteDbQueryReply]

func (c *reportClient) ListExecutions(ctx context.Context, in *CrawlExecutionsListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[frontier.CrawlExecutionStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Report_ServiceDesc.Streams[1], Report_ListExecutions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CrawlExecutionsListRequest, frontier.CrawlExecutionStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Report_ListExecutionsClient = grpc.ServerStreamingClient[frontier.CrawlExecutionStatus]

func (c *reportClient) ListJobExecutions(ctx context.Context, in *JobExecutionsListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[frontier.JobExecutionStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Report_ServiceDesc.Streams[2], Report_ListJobExecutions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JobExecutionsListRequest, frontier.JobExecutionStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Report_ListJobExecutionsClient = grpc.ServerStreamingClient[frontier.JobExecutionStatus]

// ReportServer is the server API for Report service.
// All implementations must embed UnimplementedReportServer
// for forward compatibility.
//
// Service for crawler reports.
type ReportServer interface {
	// Execute a query against the database
	ExecuteDbQuery(*ExecuteDbQueryRequest, grpc.ServerStreamingServer[ExecuteDbQueryReply]) error
	// List a set of crawl executions
	ListExecutions(*CrawlExecutionsListRequest, grpc.ServerStreamingServer[frontier.CrawlExecutionStatus]) error
	// List a set of job executions
	ListJobExecutions(*JobExecutionsListRequest, grpc.ServerStreamingServer[frontier.JobExecutionStatus]) error
	mustEmbedUnimplementedReportServer()
}

// UnimplementedReportServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportServer struct{}

func (UnimplementedReportServer) ExecuteDbQuery(*ExecuteDbQueryRequest, grpc.ServerStreamingServer[ExecuteDbQueryReply]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteDbQuery not implemented")
}
func (UnimplementedReportServer) ListExecutions(*CrawlExecutionsListRequest, grpc.ServerStreamingServer[frontier.CrawlExecutionStatus]) error {
	return status.Errorf(codes.Unimplemented, "method ListExecutions not implemented")
}
func (UnimplementedReportServer) ListJobExecutions(*JobExecutionsListRequest, grpc.ServerStreamingServer[frontier.JobExecutionStatus]) error {
	return status.Errorf(codes.Unimplemented, "method ListJobExecutions not implemented")
}
func (UnimplementedReportServer) mustEmbedUnimplementedReportServer() {}
func (UnimplementedReportServer) testEmbeddedByValue()                {}

// UnsafeReportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportServer will
// result in compilation errors.
type UnsafeReportServer interface {
	mustEmbedUnimplementedReportServer()
}

func RegisterReportServer(s grpc.ServiceRegistrar, srv ReportServer) {
	// If the following call pancis, it indicates UnimplementedReportServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Report_ServiceDesc, srv)
}

func _Report_ExecuteDbQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteDbQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ExecuteDbQuery(m, &grpc.GenericServerStream[ExecuteDbQueryRequest, ExecuteDbQueryReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Report_ExecuteDbQueryServer = grpc.ServerStreamingServer[ExecuteDbQueryReply]

func _Report_ListExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlExecutionsListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListExecutions(m, &grpc.GenericServerStream[CrawlExecutionsListRequest, frontier.CrawlExecutionStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Report_ListExecutionsServer = grpc.ServerStreamingServer[frontier.CrawlExecutionStatus]

func _Report_ListJobExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobExecutionsListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportServer).ListJobExecutions(m, &grpc.GenericServerStream[JobExecutionsListRequest, frontier.JobExecutionStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Report_ListJobExecutionsServer = grpc.ServerStreamingServer[frontier.JobExecutionStatus]

// Report_ServiceDesc is the grpc.ServiceDesc for Report service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Report_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.report.v1.Report",
	HandlerType: (*ReportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteDbQuery",
			Handler:       _Report_ExecuteDbQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListExecutions",
			Handler:       _Report_ListExecutions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListJobExecutions",
			Handler:       _Report_ListJobExecutions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "report/v1/report.proto",
}
