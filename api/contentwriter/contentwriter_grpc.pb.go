// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: contentwriter/v1/contentwriter.proto

package contentwriter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContentWriter_Write_FullMethodName = "/veidemann.api.contentwriter.v1.ContentWriter/write"
)

// ContentWriterClient is the client API for ContentWriter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for writing archival data to persistent storage.
type ContentWriterClient interface {
	Write(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WriteRequest, WriteReply], error)
}

type contentWriterClient struct {
	cc grpc.ClientConnInterface
}

func NewContentWriterClient(cc grpc.ClientConnInterface) ContentWriterClient {
	return &contentWriterClient{cc}
}

func (c *contentWriterClient) Write(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WriteRequest, WriteReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContentWriter_ServiceDesc.Streams[0], ContentWriter_Write_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WriteRequest, WriteReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContentWriter_WriteClient = grpc.ClientStreamingClient[WriteRequest, WriteReply]

// ContentWriterServer is the server API for ContentWriter service.
// All implementations must embed UnimplementedContentWriterServer
// for forward compatibility.
//
// Service for writing archival data to persistent storage.
type ContentWriterServer interface {
	Write(grpc.ClientStreamingServer[WriteRequest, WriteReply]) error
	mustEmbedUnimplementedContentWriterServer()
}

// UnimplementedContentWriterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentWriterServer struct{}

func (UnimplementedContentWriterServer) Write(grpc.ClientStreamingServer[WriteRequest, WriteReply]) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedContentWriterServer) mustEmbedUnimplementedContentWriterServer() {}
func (UnimplementedContentWriterServer) testEmbeddedByValue()                       {}

// UnsafeContentWriterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentWriterServer will
// result in compilation errors.
type UnsafeContentWriterServer interface {
	mustEmbedUnimplementedContentWriterServer()
}

func RegisterContentWriterServer(s grpc.ServiceRegistrar, srv ContentWriterServer) {
	// If the following call pancis, it indicates UnimplementedContentWriterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContentWriter_ServiceDesc, srv)
}

func _ContentWriter_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentWriterServer).Write(&grpc.GenericServerStream[WriteRequest, WriteReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContentWriter_WriteServer = grpc.ClientStreamingServer[WriteRequest, WriteReply]

// ContentWriter_ServiceDesc is the grpc.ServiceDesc for ContentWriter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentWriter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.contentwriter.v1.ContentWriter",
	HandlerType: (*ContentWriterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "write",
			Handler:       _ContentWriter_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "contentwriter/v1/contentwriter.proto",
}
