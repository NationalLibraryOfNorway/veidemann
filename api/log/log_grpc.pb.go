// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: log/v1/log.proto

package log

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Log_ListCrawlLogs_FullMethodName = "/veidemann.api.log.v1.Log/ListCrawlLogs"
	Log_ListPageLogs_FullMethodName  = "/veidemann.api.log.v1.Log/ListPageLogs"
	Log_WriteCrawlLog_FullMethodName = "/veidemann.api.log.v1.Log/WriteCrawlLog"
	Log_WritePageLog_FullMethodName  = "/veidemann.api.log.v1.Log/WritePageLog"
)

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for crawl/page-log
type LogClient interface {
	// List crawl logs
	ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CrawlLog], error)
	// List page logs
	ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PageLog], error)
	// Write crawl logs
	WriteCrawlLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WriteCrawlLogRequest, emptypb.Empty], error)
	// Write page log
	WritePageLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WritePageLogRequest, emptypb.Empty], error)
}

type logClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClient(cc grpc.ClientConnInterface) LogClient {
	return &logClient{cc}
}

func (c *logClient) ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CrawlLog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[0], Log_ListCrawlLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CrawlLogListRequest, CrawlLog]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Log_ListCrawlLogsClient = grpc.ServerStreamingClient[CrawlLog]

func (c *logClient) ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PageLog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[1], Log_ListPageLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PageLogListRequest, PageLog]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Log_ListPageLogsClient = grpc.ServerStreamingClient[PageLog]

func (c *logClient) WriteCrawlLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WriteCrawlLogRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[2], Log_WriteCrawlLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WriteCrawlLogRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Log_WriteCrawlLogClient = grpc.ClientStreamingClient[WriteCrawlLogRequest, emptypb.Empty]

func (c *logClient) WritePageLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WritePageLogRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[3], Log_WritePageLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WritePageLogRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Log_WritePageLogClient = grpc.ClientStreamingClient[WritePageLogRequest, emptypb.Empty]

// LogServer is the server API for Log service.
// All implementations must embed UnimplementedLogServer
// for forward compatibility.
//
// Service for crawl/page-log
type LogServer interface {
	// List crawl logs
	ListCrawlLogs(*CrawlLogListRequest, grpc.ServerStreamingServer[CrawlLog]) error
	// List page logs
	ListPageLogs(*PageLogListRequest, grpc.ServerStreamingServer[PageLog]) error
	// Write crawl logs
	WriteCrawlLog(grpc.ClientStreamingServer[WriteCrawlLogRequest, emptypb.Empty]) error
	// Write page log
	WritePageLog(grpc.ClientStreamingServer[WritePageLogRequest, emptypb.Empty]) error
	mustEmbedUnimplementedLogServer()
}

// UnimplementedLogServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogServer struct{}

func (UnimplementedLogServer) ListCrawlLogs(*CrawlLogListRequest, grpc.ServerStreamingServer[CrawlLog]) error {
	return status.Errorf(codes.Unimplemented, "method ListCrawlLogs not implemented")
}
func (UnimplementedLogServer) ListPageLogs(*PageLogListRequest, grpc.ServerStreamingServer[PageLog]) error {
	return status.Errorf(codes.Unimplemented, "method ListPageLogs not implemented")
}
func (UnimplementedLogServer) WriteCrawlLog(grpc.ClientStreamingServer[WriteCrawlLogRequest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method WriteCrawlLog not implemented")
}
func (UnimplementedLogServer) WritePageLog(grpc.ClientStreamingServer[WritePageLogRequest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method WritePageLog not implemented")
}
func (UnimplementedLogServer) mustEmbedUnimplementedLogServer() {}
func (UnimplementedLogServer) testEmbeddedByValue()             {}

// UnsafeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServer will
// result in compilation errors.
type UnsafeLogServer interface {
	mustEmbedUnimplementedLogServer()
}

func RegisterLogServer(s grpc.ServiceRegistrar, srv LogServer) {
	// If the following call pancis, it indicates UnimplementedLogServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Log_ServiceDesc, srv)
}

func _Log_ListCrawlLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServer).ListCrawlLogs(m, &grpc.GenericServerStream[CrawlLogListRequest, CrawlLog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Log_ListCrawlLogsServer = grpc.ServerStreamingServer[CrawlLog]

func _Log_ListPageLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PageLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServer).ListPageLogs(m, &grpc.GenericServerStream[PageLogListRequest, PageLog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Log_ListPageLogsServer = grpc.ServerStreamingServer[PageLog]

func _Log_WriteCrawlLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServer).WriteCrawlLog(&grpc.GenericServerStream[WriteCrawlLogRequest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Log_WriteCrawlLogServer = grpc.ClientStreamingServer[WriteCrawlLogRequest, emptypb.Empty]

func _Log_WritePageLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServer).WritePageLog(&grpc.GenericServerStream[WritePageLogRequest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Log_WritePageLogServer = grpc.ClientStreamingServer[WritePageLogRequest, emptypb.Empty]

// Log_ServiceDesc is the grpc.ServiceDesc for Log service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Log_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.log.v1.Log",
	HandlerType: (*LogServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCrawlLogs",
			Handler:       _Log_ListCrawlLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPageLogs",
			Handler:       _Log_ListPageLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteCrawlLog",
			Handler:       _Log_WriteCrawlLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WritePageLog",
			Handler:       _Log_WritePageLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "log/v1/log.proto",
}
