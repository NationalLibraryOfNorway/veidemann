// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: browsercontroller/v1/browsercontroller.proto

package browsercontroller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrowserController_Do_FullMethodName = "/veidemann.api.browsercontroller.v1.BrowserController/do"
)

// BrowserControllerClient is the client API for BrowserController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for used by recorder proxy to comunicate with browser controller.
type BrowserControllerClient interface {
	Do(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DoRequest, DoReply], error)
}

type browserControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrowserControllerClient(cc grpc.ClientConnInterface) BrowserControllerClient {
	return &browserControllerClient{cc}
}

func (c *browserControllerClient) Do(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DoRequest, DoReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BrowserController_ServiceDesc.Streams[0], BrowserController_Do_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DoRequest, DoReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrowserController_DoClient = grpc.BidiStreamingClient[DoRequest, DoReply]

// BrowserControllerServer is the server API for BrowserController service.
// All implementations must embed UnimplementedBrowserControllerServer
// for forward compatibility.
//
// Service for used by recorder proxy to comunicate with browser controller.
type BrowserControllerServer interface {
	Do(grpc.BidiStreamingServer[DoRequest, DoReply]) error
	mustEmbedUnimplementedBrowserControllerServer()
}

// UnimplementedBrowserControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrowserControllerServer struct{}

func (UnimplementedBrowserControllerServer) Do(grpc.BidiStreamingServer[DoRequest, DoReply]) error {
	return status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedBrowserControllerServer) mustEmbedUnimplementedBrowserControllerServer() {}
func (UnimplementedBrowserControllerServer) testEmbeddedByValue()                           {}

// UnsafeBrowserControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrowserControllerServer will
// result in compilation errors.
type UnsafeBrowserControllerServer interface {
	mustEmbedUnimplementedBrowserControllerServer()
}

func RegisterBrowserControllerServer(s grpc.ServiceRegistrar, srv BrowserControllerServer) {
	// If the following call pancis, it indicates UnimplementedBrowserControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrowserController_ServiceDesc, srv)
}

func _BrowserController_Do_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrowserControllerServer).Do(&grpc.GenericServerStream[DoRequest, DoReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrowserController_DoServer = grpc.BidiStreamingServer[DoRequest, DoReply]

// BrowserController_ServiceDesc is the grpc.ServiceDesc for BrowserController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrowserController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.browsercontroller.v1.BrowserController",
	HandlerType: (*BrowserControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "do",
			Handler:       _BrowserController_Do_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "browsercontroller/v1/browsercontroller.proto",
}
