// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: eventhandler/v1/eventhandler.proto

package eventhandler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventHandler_GetEventObject_FullMethodName     = "/veidemann.api.eventhandler.v1.EventHandler/GetEventObject"
	EventHandler_ListEventObjects_FullMethodName   = "/veidemann.api.eventhandler.v1.EventHandler/ListEventObjects"
	EventHandler_CountEventObjects_FullMethodName  = "/veidemann.api.eventhandler.v1.EventHandler/CountEventObjects"
	EventHandler_SaveEventObject_FullMethodName    = "/veidemann.api.eventhandler.v1.EventHandler/SaveEventObject"
	EventHandler_UpdateEventObjects_FullMethodName = "/veidemann.api.eventhandler.v1.EventHandler/UpdateEventObjects"
	EventHandler_DeleteEventObject_FullMethodName  = "/veidemann.api.eventhandler.v1.EventHandler/DeleteEventObject"
	EventHandler_ListLabels_FullMethodName         = "/veidemann.api.eventhandler.v1.EventHandler/ListLabels"
)

// EventHandlerClient is the client API for EventHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for working with events.
type EventHandlerClient interface {
	// Get an event object by ID
	GetEventObject(ctx context.Context, in *EventRef, opts ...grpc.CallOption) (*EventObject, error)
	// List a set of event objects
	ListEventObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventObject], error)
	// Count event objects
	CountEventObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCountResponse, error)
	// Save an event object
	SaveEventObject(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*EventObject, error)
	// Update event objects
	UpdateEventObjects(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete an event object
	DeleteEventObject(ctx context.Context, in *EventObject, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListLabels(ctx context.Context, in *ListLabelRequest, opts ...grpc.CallOption) (*ListLabelResponse, error)
}

type eventHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventHandlerClient(cc grpc.ClientConnInterface) EventHandlerClient {
	return &eventHandlerClient{cc}
}

func (c *eventHandlerClient) GetEventObject(ctx context.Context, in *EventRef, opts ...grpc.CallOption) (*EventObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventObject)
	err := c.cc.Invoke(ctx, EventHandler_GetEventObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) ListEventObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventObject], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventHandler_ServiceDesc.Streams[0], EventHandler_ListEventObjects_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequest, EventObject]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventHandler_ListEventObjectsClient = grpc.ServerStreamingClient[EventObject]

func (c *eventHandlerClient) CountEventObjects(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCountResponse)
	err := c.cc.Invoke(ctx, EventHandler_CountEventObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) SaveEventObject(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*EventObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventObject)
	err := c.cc.Invoke(ctx, EventHandler_SaveEventObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) UpdateEventObjects(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, EventHandler_UpdateEventObjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) DeleteEventObject(ctx context.Context, in *EventObject, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, EventHandler_DeleteEventObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) ListLabels(ctx context.Context, in *ListLabelRequest, opts ...grpc.CallOption) (*ListLabelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLabelResponse)
	err := c.cc.Invoke(ctx, EventHandler_ListLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventHandlerServer is the server API for EventHandler service.
// All implementations must embed UnimplementedEventHandlerServer
// for forward compatibility.
//
// Service for working with events.
type EventHandlerServer interface {
	// Get an event object by ID
	GetEventObject(context.Context, *EventRef) (*EventObject, error)
	// List a set of event objects
	ListEventObjects(*ListRequest, grpc.ServerStreamingServer[EventObject]) error
	// Count event objects
	CountEventObjects(context.Context, *ListRequest) (*ListCountResponse, error)
	// Save an event object
	SaveEventObject(context.Context, *SaveRequest) (*EventObject, error)
	// Update event objects
	UpdateEventObjects(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete an event object
	DeleteEventObject(context.Context, *EventObject) (*DeleteResponse, error)
	ListLabels(context.Context, *ListLabelRequest) (*ListLabelResponse, error)
	mustEmbedUnimplementedEventHandlerServer()
}

// UnimplementedEventHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventHandlerServer struct{}

func (UnimplementedEventHandlerServer) GetEventObject(context.Context, *EventRef) (*EventObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventObject not implemented")
}
func (UnimplementedEventHandlerServer) ListEventObjects(*ListRequest, grpc.ServerStreamingServer[EventObject]) error {
	return status.Errorf(codes.Unimplemented, "method ListEventObjects not implemented")
}
func (UnimplementedEventHandlerServer) CountEventObjects(context.Context, *ListRequest) (*ListCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountEventObjects not implemented")
}
func (UnimplementedEventHandlerServer) SaveEventObject(context.Context, *SaveRequest) (*EventObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveEventObject not implemented")
}
func (UnimplementedEventHandlerServer) UpdateEventObjects(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventObjects not implemented")
}
func (UnimplementedEventHandlerServer) DeleteEventObject(context.Context, *EventObject) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventObject not implemented")
}
func (UnimplementedEventHandlerServer) ListLabels(context.Context, *ListLabelRequest) (*ListLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabels not implemented")
}
func (UnimplementedEventHandlerServer) mustEmbedUnimplementedEventHandlerServer() {}
func (UnimplementedEventHandlerServer) testEmbeddedByValue()                      {}

// UnsafeEventHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventHandlerServer will
// result in compilation errors.
type UnsafeEventHandlerServer interface {
	mustEmbedUnimplementedEventHandlerServer()
}

func RegisterEventHandlerServer(s grpc.ServiceRegistrar, srv EventHandlerServer) {
	// If the following call pancis, it indicates UnimplementedEventHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventHandler_ServiceDesc, srv)
}

func _EventHandler_GetEventObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).GetEventObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventHandler_GetEventObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).GetEventObject(ctx, req.(*EventRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_ListEventObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventHandlerServer).ListEventObjects(m, &grpc.GenericServerStream[ListRequest, EventObject]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventHandler_ListEventObjectsServer = grpc.ServerStreamingServer[EventObject]

func _EventHandler_CountEventObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).CountEventObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventHandler_CountEventObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).CountEventObjects(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_SaveEventObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).SaveEventObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventHandler_SaveEventObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).SaveEventObject(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_UpdateEventObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).UpdateEventObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventHandler_UpdateEventObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).UpdateEventObjects(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_DeleteEventObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).DeleteEventObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventHandler_DeleteEventObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).DeleteEventObject(ctx, req.(*EventObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_ListLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).ListLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventHandler_ListLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).ListLabels(ctx, req.(*ListLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventHandler_ServiceDesc is the grpc.ServiceDesc for EventHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.eventhandler.v1.EventHandler",
	HandlerType: (*EventHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventObject",
			Handler:    _EventHandler_GetEventObject_Handler,
		},
		{
			MethodName: "CountEventObjects",
			Handler:    _EventHandler_CountEventObjects_Handler,
		},
		{
			MethodName: "SaveEventObject",
			Handler:    _EventHandler_SaveEventObject_Handler,
		},
		{
			MethodName: "UpdateEventObjects",
			Handler:    _EventHandler_UpdateEventObjects_Handler,
		},
		{
			MethodName: "DeleteEventObject",
			Handler:    _EventHandler_DeleteEventObject_Handler,
		},
		{
			MethodName: "ListLabels",
			Handler:    _EventHandler_ListLabels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEventObjects",
			Handler:       _EventHandler_ListEventObjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventhandler/v1/eventhandler.proto",
}
